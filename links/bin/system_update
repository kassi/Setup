#!/bin/bash

versionfile=$HOME/.system_update-osversion
# read system version since last run
last_sw_version=$(cat $versionfile 2>/dev/null)

# determine current version
current_sw_version=$(sw_vers | grep ProductVersion | cut -d $'\t' -f 2)

# Homebrew
set -e
brew update -v
brew outdated

set +e
brew upgrade
brew cleanup -s
brew cask cleanup

# Python
if [ $(which pyenv) ]; then
  pyenv init - > $HOME/System/Dotfiles/links/.bash.d/40_python_bash_profile
fi

set -e
if [ $(which pip) ]; then
  pip install --upgrade -q pip setuptools
  pip list --format=freeze | cut -d '=' -f 1 | xargs pip install --upgrade -q
fi

if [ $(which pip3) ]; then
  pip3 install --upgrade -q pip setuptools wheel
  pip3 list --format=freeze | cut -d '=' -f 1 | xargs pip3 install --upgrade -q
fi

# Ruby
rvm version | grep latest && echo "rvm seems to be up to date" || rvm get stable
rvm reload
ruby -e ' \
  known=`rvm list known_strings | grep ^ruby-[[:digit:]]`.split;
  inst=`rvm list | grep ruby- | cut -d " " -f 2`.split;
  newer=[]
  known.each do |v|
    if inst.none? { |i| i >= v }
      newer << v
    end
  end
  if newer.any?
    puts "New rubies available:"
    puts newer
  end
'

if [[ $last_sw_version != $current_sw_version ]]; then
  # OS update took place
  rvm reinstall all --force
fi

# write current system version
echo $current_sw_version > $versionfile
